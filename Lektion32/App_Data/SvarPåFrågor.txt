Svar på frågor:

1. Klassen ansvarar för att:
	A. Representera en användare
	B. Spara/Uppdatera/Ta bort en användare (Dvs. EF-operationer för användare)
	C. Skicka Email till användare

Klassen bör endast ansvara för A. ovan. 

B. bör hanteras genom repo metoder, med anrop utanför klassen (ej i klassmetoder)
C. bör hanteras separat t.ex. i en EmailHelper-klass, med anrop utanför klassen (ej i klassmetoder)

3. En annan anledning är att Repository-klassen skall hantera andra Entities, som ej är garanterade att implementera en Email-property.

5. Om vi ersatt Repository<User> med UserRepository så hade programmet fungerat som tänkt och inga oönskade beteenden hade uppstått eftersom UserRepository ärver relevanta metoder från Repository<User> och alltså har samma implementation för dessa metoder.

Vi följer LSP eftersom vi kan ersätta Repository<User> med den ärvda typen UserRepository utan sidoeffekter.

6. Om vi hade ändrat implementationen av t.ex. Save()-metoden i UserRepository så att den inte sparar data så hade vi brutit mot LSP eftersom vi då inte hade kunnat ersätta Repository<User> med UserRepository utan oönskade sidoeffekter (I det här fallet att data inte sparas).

7. Implementationen bryter mot ISP eftersom vi har ett generellt interface som innehåller metoder som 

Problemen med detta är att vi får en massa onödig kod i de konkreta implementationerna (NotImplementedException-metoderna).

Det kan också se ut i intellisense som att en implementation stödjer t.ex. ExportToPDF när den i själva verket inte gör det. Detta kan potentiellt leda till runtime exceptions.

Interfacet förmedlar inte heller intentionen hos de olika konkreta implementationerna. T.ex. kanske det finns en god anledning att inte exportera en viss implementation till SQL - I den faktiska koden kan man få intrycket att intentionen är att det skall gå att exportera till SQL, men att det helt enkelt inte hunnits med ännu.

9. Framtidssäkringen är i detta fall rakt av en dålig idé.

Det finns ingen konkret implementation - allt framtidssäkringen bidrar med är extra skräpkod och i värsta fall kan det leda till att implementationer som inte behövs skapas.

Ett argument mot detta skulle kunna vara att behålla det som en påminnelse om vad som är kvar att implementera. Detta är ett mycket svagt argument. Sådan information är avsevärt mycket bättre att lagra i ett verktyg som är avsett för det - t.ex. en issue-tracker, projektplaneringsverktyg eller Sprint Board. Att behålla den här typen av reminders i källkod är ett recept för att garanterat glömma av det.

10. DIP används då konstruktorn för HomeControllern tar en interface-variabel, samt att den privata variabeln är en interface-variabel. Ninject binder det aktuella objektet till en konkret implementation, men HomeController har fortfarande endast beroenden mot interfacet IRepository, ej den konkreta implementationen Repository<User>

En liknande implementation som ej följer DIP hade haft en privat variabel av typen Repository<User>, dvs. en konkret implementation och inte ett interface. Konstruktorn för HomeControllern hade initierat denna variabel med "_userRepo = new Repository<User();" och ej tagit någon variabel som argument.